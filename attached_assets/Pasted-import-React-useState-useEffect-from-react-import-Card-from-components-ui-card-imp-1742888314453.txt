import React, { useState, useEffect } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/alert';
import { ChevronRight, ChevronLeft, Heart, Share2, Twitter, Facebook, Linkedin, Copy } from 'lucide-react';

// Standard Feeding America conversion factors
const IMPACT_FORMULAS = {
  DOLLARS_TO_MEALS: 10, // $1 = 10 meals
  MEALS_TO_PEOPLE: 12,  // 12 meals helps 1 person for a month
  POUNDS_TO_MEALS: 1.2, // 1.2 pounds = 1 meal
  CO2_PER_POUND: 2.5,   // 2.5 lbs of CO2 saved per pound of food
  WATER_PER_POUND: 108, // 108 gallons of water saved per pound of food
};

// Mock donor data - in production this would come from URL parameters or API
const DONOR_DATA = {
  firstName: "Sarah",
  lastName: "Johnson",
  email: "sarah@example.com",
  totalGiving: 350.00,
  firstGiftDate: "2023-03-15",
  lastGiftDate: "2023-12-10",
  largestGift: 150.00,
  giftCount: 4
};

// Food bank info - in production this would be fetched from an API
const FOOD_BANK_INFO = {
  name: "Metro Area Food Bank",
  logo: "/api/placeholder/200/60",
  primaryColor: "#0ea5e9",
  secondaryColor: "#22c55e",
  thankYouMessage: "Your generosity is helping families in our community access nutritious food. Thank you for being part of our mission to fight hunger!",
  thankYouVideoUrl: ""
};

const calculateImpact = (amount) => {
  const meals = amount * IMPACT_FORMULAS.DOLLARS_TO_MEALS;
  const people = Math.ceil(meals / IMPACT_FORMULAS.MEALS_TO_PEOPLE);
  const pounds = meals * (1 / IMPACT_FORMULAS.POUNDS_TO_MEALS);
  const co2Saved = pounds * IMPACT_FORMULAS.CO2_PER_POUND;
  const waterSaved = pounds * IMPACT_FORMULAS.WATER_PER_POUND;
  
  return {
    meals: Math.round(meals),
    people,
    pounds: Math.round(pounds),
    co2Saved: Math.round(co2Saved),
    waterSaved: Math.round(waterSaved)
  };
};

// Slides in the experience
const SLIDES = [
  'welcome',
  'meals',
  'people',
  'history',
  'thanks',
  'summary'
];

const DonorImpactExperience = () => {
  const [currentSlide, setCurrentSlide] = useState(0);
  const [animateCount, setAnimateCount] = useState(false);
  const [showShareMenu, setShowShareMenu] = useState(false);
  const [copiedToClipboard, setCopiedToClipboard] = useState(false);
  
  // Calculate impact metrics
  const impact = calculateImpact(DONOR_DATA.totalGiving);
  
  // Format date to readable format
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' });
  };
  
  // Handle slide navigation
  const goToNextSlide = () => {
    if (currentSlide < SLIDES.length - 1) {
      setCurrentSlide(currentSlide + 1);
      setAnimateCount(true);
    }
  };
  
  const goToPreviousSlide = () => {
    if (currentSlide > 0) {
      setCurrentSlide(currentSlide - 1);
    }
  };
  
  // Trigger count animation when slide changes
  useEffect(() => {
    if (animateCount) {
      const timer = setTimeout(() => {
        setAnimateCount(false);
      }, 2000);
      return () => clearTimeout(timer);
    }
  }, [animateCount]);
  
  // Copy URL to clipboard
  const copyUrlToClipboard = () => {
    navigator.clipboard.writeText(window.location.href);
    setCopiedToClipboard(true);
    setTimeout(() => setCopiedToClipboard(false), 2000);
  };
  
  return (
    <div className="h-screen flex items-center justify-center bg-gray-100 p-4">
      <Card className="max-w-2xl w-full overflow-hidden rounded-xl shadow-xl">
        {/* Welcome Slide */}
        {SLIDES[currentSlide] === 'welcome' && (
          <div className="p-8 text-center" style={{ background: `linear-gradient(135deg, ${FOOD_BANK_INFO.primaryColor}40, ${FOOD_BANK_INFO.secondaryColor}40)` }}>
            <img src={FOOD_BANK_INFO.logo} alt={FOOD_BANK_INFO.name} className="h-16 mx-auto mb-6" />
            
            <h1 className="text-3xl md:text-4xl font-bold mb-4">
              Hey {DONOR_DATA.firstName}!
            </h1>
            
            <div className="mb-6">
              <p className="text-xl md:text-2xl font-medium mb-2">Here's your</p>
              <div className="flex items-center justify-center">
                <h2 className="text-3xl md:text-5xl font-bold">
                  <span style={{ color: FOOD_BANK_INFO.primaryColor }}>2023</span> 
                  <span className="mx-2">Impact</span>
                  <span style={{ color: FOOD_BANK_INFO.secondaryColor }}>Wrapped</span>
                </h2>
              </div>
            </div>
            
            <p className="text-lg md:text-xl text-gray-700 mb-6">
              Let's discover the amazing difference you've made in our community!
            </p>
            
            <Button 
              className="inline-flex items-center px-6 py-3 text-lg font-medium rounded-lg shadow-md text-white"
              style={{ backgroundColor: FOOD_BANK_INFO.primaryColor }}
              onClick={goToNextSlide}
            >
              Start Your Journey <ChevronRight className="ml-2 h-5 w-5" />
            </Button>
          </div>
        )}
        
        {/* Meals Provided Slide */}
        {SLIDES[currentSlide] === 'meals' && (
          <div className="p-8 text-center">
            <h2 className="text-2xl md:text-3xl font-bold mb-4">
              Thanks to your generosity...
            </h2>
            
            <div className="relative mb-6">
              <div className="text-7xl md:text-8xl font-bold my-12" style={{ color: FOOD_BANK_INFO.primaryColor }}>
                {animateCount ? (
                  <span className="inline-block animate-count" key={impact.meals}>
                    {impact.meals}
                  </span>
                ) : (
                  impact.meals
                )}
              </div>
              <div className="text-2xl md:text-3xl font-medium">
                meals provided
              </div>
              
              <div className="absolute inset-0 -z-10 overflow-hidden opacity-10">
                {[...Array(20)].map((_, i) => (
                  <img 
                    key={i}
                    src="/api/placeholder/40/40" 
                    alt="Meal icon" 
                    className="absolute"
                    style={{
                      top: `${Math.random() * 100}%`,
                      left: `${Math.random() * 100}%`,
                      transform: `rotate(${Math.random() * 360}deg)`
                    }}
                  />
                ))}
              </div>
            </div>
            
            <p className="text-lg text-gray-600 mb-8">
              Every dollar you donated provided approximately 10 meals to people facing hunger in our community.
            </p>
            
            <div className="flex justify-between">
              <Button 
                className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-lg shadow-sm text-gray-700 bg-white"
                onClick={goToPreviousSlide}
              >
                <ChevronLeft className="mr-2 h-5 w-5" /> Back
              </Button>
              <Button 
                className="inline-flex items-center px-4 py-2 rounded-lg shadow-sm text-white"
                style={{ backgroundColor: FOOD_BANK_INFO.primaryColor }}
                onClick={goToNextSlide}
              >
                Next <ChevronRight className="ml-2 h-5 w-5" />
              </Button>
            </div>
          </div>
        )}
        
        {/* People Helped Slide */}
        {SLIDES[currentSlide] === 'people' && (
          <div className="p-8 text-center">
            <h2 className="text-2xl md:text-3xl font-bold mb-4">
              Your donations helped...
            </h2>
            
            <div className="relative mb-6">
              <div className="flex justify-center items-end gap-2 my-12">
                <div className="text-7xl md:text-8xl font-bold" style={{ color: FOOD_BANK_INFO.secondaryColor }}>
                  {animateCount ? (
                    <span className="inline-block animate-count" key={impact.people}>
                      {impact.people}
                    </span>
                  ) : (
                    impact.people
                  )}
                </div>
                <div className="text-2xl md:text-3xl font-medium mb-3">
                  people
                </div>
              </div>
              
              <div className="flex justify-center gap-2 flex-wrap max-w-md mx-auto mb-4">
                {[...Array(Math.min(impact.people, 20))].map((_, i) => (
                  <div 
                    key={i}
                    className="w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center overflow-hidden"
                  >
                    <img src="/api/placeholder/40/40" alt="Person" />
                  </div>
                ))}
                {impact.people > 20 && (
                  <div className="w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center text-gray-600 font-medium">
                    +{impact.people - 20}
                  </div>
                )}
              </div>
            </div>
            
            <p className="text-lg text-gray-600 mb-8">
              That's approximately {impact.people} neighbors who received 
              nutritious food thanks to your support!
            </p>
            
            <div className="flex justify-between">
              <Button 
                className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-lg shadow-sm text-gray-700 bg-white"
                onClick={goToPreviousSlide}
              >
                <ChevronLeft className="mr-2 h-5 w-5" /> Back
              </Button>
              <Button 
                className="inline-flex items-center px-4 py-2 rounded-lg shadow-sm text-white"
                style={{ backgroundColor: FOOD_BANK_INFO.primaryColor }}
                onClick={goToNextSlide}
              >
                Next <ChevronRight className="ml-2 h-5 w-5" />
              </Button>
            </div>
          </div>
        )}
        
        {/* Giving History Slide */}
        {SLIDES[currentSlide] === 'history' && (
          <div className="p-8">
            <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center">
              Your Giving Journey
            </h2>
            
            <div className="space-y-6 mb-8">
              <div className="flex items-center gap-4">
                <div className="w-12 h-12 rounded-full flex items-center justify-center" style={{ backgroundColor: `${FOOD_BANK_INFO.primaryColor}20` }}>
                  <span className="text-xl font-bold" style={{ color: FOOD_BANK_INFO.primaryColor }}>1</span>
                </div>
                <div>
                  <h3 className="text-lg font-medium">First Gift</h3>
                  <p className="text-gray-600">
                    {formatDate(DONOR_DATA.firstGiftDate)}
                  </p>
                </div>
              </div>
              
              <div className="flex items-center gap-4">
                <div className="w-12 h-12 rounded-full flex items-center justify-center" style={{ backgroundColor: `${FOOD_BANK_INFO.secondaryColor}20` }}>
                  <span className="text-xl font-bold" style={{ color: FOOD_BANK_INFO.secondaryColor }}>$</span>
                </div>
                <div>
                  <h3 className="text-lg font-medium">Largest Gift</h3>
                  <p className="text-gray-600">
                    ${DONOR_DATA.largestGift.toFixed(2)} on {formatDate(DONOR_DATA.lastGiftDate)}
                  </p>
                </div>
              </div>
              
              <div className="flex items-center gap-4">
                <div className="w-12 h-12 rounded-full flex items-center justify-center" style={{ backgroundColor: `${FOOD_BANK_INFO.primaryColor}20` }}>
                  <Heart className="h-6 w-6" style={{ color: FOOD_BANK_INFO.primaryColor }} />
                </div>
                <div>
                  <h3 className="text-lg font-medium">Total Giving</h3>
                  <p className="text-gray-600">
                    ${DONOR_DATA.totalGiving.toFixed(2)} across {DONOR_DATA.giftCount} gifts
                  </p>
                </div>
              </div>
            </div>
            
            <div className="text-center mb-8">
              <h3 className="text-xl font-bold mb-2">Your Impact Over Time</h3>
              <p className="text-gray-600">
                You've helped provide approximately 
                <span className="font-medium" style={{ color: FOOD_BANK_INFO.secondaryColor }}> {impact.meals} meals </span> 
                since your first gift!
              </p>
            </div>
            
            <div className="flex justify-between">
              <Button 
                className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-lg shadow-sm text-gray-700 bg-white"
                onClick={goToPreviousSlide}
              >
                <ChevronLeft className="mr-2 h-5 w-5" /> Back
              </Button>
              <Button 
                className="inline-flex items-center px-4 py-2 rounded-lg shadow-sm text-white"
                style={{ backgroundColor: FOOD_BANK_INFO.primaryColor }}
                onClick={goToNextSlide}
              >
                Next <ChevronRight className="ml-2 h-5 w-5" />
              </Button>
            </div>
          </div>
        )}
        
        {/* Thank You Slide */}
        {SLIDES[currentSlide] === 'thanks' && (
          <div className="p-8 text-center">
            <img src={FOOD_BANK_INFO.logo} alt={FOOD_BANK_INFO.name} className="h-12 mx-auto mb-6" />
            
            <h2 className="text-2xl md:text-3xl font-bold mb-6">
              Thank You, {DONOR_DATA.firstName}!
            </h2>
            
            <div className="mb-8">
              {FOOD_BANK_INFO.thankYouVideoUrl ? (
                <div className="aspect-video bg-gray-200 rounded-lg mb-6 mx-auto max-w-md overflow-hidden">
                  <img src="/api/placeholder/640/360" alt="Thank you video thumbnail" className="w-full" />
                  <div className="relative -mt-40 h-40 flex items-center justify-center">
                    <div className="w-16 h-16 rounded-full bg-white/80 flex items-center justify-center">
                      <div className="w-0 h-0 border-t-8 border-b-8 border-l-16 border-transparent border-l-gray-800 ml-1"></div>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="max-w-md mx-auto mb-6">
                  <img src="/api/placeholder/500/300" alt="Thank you" className="w-full rounded-lg" />
                </div>
              )}
              
              <p className="text-lg text-gray-600">
                {FOOD_BANK_INFO.thankYouMessage}
              </p>
            </div>
            
            <div className="flex justify-between">
              <Button 
                className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-lg shadow-sm text-gray-700 bg-white"
                onClick={goToPreviousSlide}
              >
                <ChevronLeft className="mr-2 h-5 w-5" /> Back
              </Button>
              <Button 
                className="inline-flex items-center px-4 py-2 rounded-lg shadow-sm text-white"
                style={{ backgroundColor: FOOD_BANK_INFO.primaryColor }}
                onClick={goToNextSlide}
              >
                Next <ChevronRight className="ml-2 h-5 w-5" />
              </Button>
            </div>
          </div>
        )}
        
        {/* Summary Slide */}
        {SLIDES[currentSlide] === 'summary' && (
          <div>
            <div className="relative h-48 overflow-hidden">
              <div 
                className="absolute inset-0 bg-cover bg-center"
                style={{ 
                  backgroundImage: `url('/api/placeholder/800/400')`,
                  filter: 'brightness(0.7)'
                }}
              ></div>
              <div className="absolute inset-0 bg-gradient-to-b from-transparent to-black opacity-70"></div>
              <div className="absolute inset-x-0 bottom-0 p-6 text-white">
                <h2 className="text-2xl md:text-3xl font-bold">
                  {DONOR_DATA.firstName}'s 2023 Impact
                </h2>
                <p className="text-lg opacity-90">
                  with {FOOD_BANK_INFO.name}
                </p>
              </div>
            </div>
            
            <div className="p-6">
              <div className="grid grid-cols-2 gap-4 mb-6">
                <div className="bg-gray-50 p-4 rounded-lg text-center">
                  <div className="text-3xl font-bold mb-1" style={{ color: FOOD_BANK_INFO.primaryColor }}>
                    ${DONOR_DATA.totalGiving.toFixed(0)}
                  </div>
                  <div className="text-sm text-gray-600">Total Giving</div>
                </div>
                <div className="bg-gray-50 p-4 rounded-lg text-center">
                  <div className="text-3xl font-bold mb-1" style={{ color: FOOD_BANK_INFO.secondaryColor }}>
                    {impact.meals}
                  </div>
                  <div className="text-sm text-gray-600">Meals Provided</div>
                </div>
                <div className="bg-gray-50 p-4 rounded-lg text-center">
                  <div className="text-3xl font-bold mb-1" style={{ color: FOOD_BANK_INFO.primaryColor }}>
                    {impact.people}
                  </div>
                  <div className="text-sm text-gray-600">People Helped</div>
                </div>
                <div className="bg-gray-50 p-4 rounded-lg text-center">
                  <div className="text-3xl font-bold mb-1" style={{ color: FOOD_BANK_INFO.secondaryColor }}>
                    {impact.co2Saved}
                  </div>
                  <div className="text-sm text-gray-600">lbs CO₂ Saved</div>
                </div>
              </div>
              
              <div className="text-center mb-6">
                <p className="text-lg mb-2">Share your impact with friends and family!</p>
                <div className="relative">
                  <Button 
                    className="inline-flex items-center px-6 py-3 rounded-lg shadow-md text-white"
                    style={{ backgroundColor: FOOD_BANK_INFO.primaryColor }}
                    onClick={() => setShowShareMenu(!showShareMenu)}
                  >
                    <Share2 className="mr-2 h-5 w-5" /> Share My Impact
                  </Button>
                  
                  {showShareMenu && (
                    <div className="absolute mt-2 p-2 bg-white rounded-lg shadow-lg z-10 flex gap-2 left-1/2 transform -translate-x-1/2">
                      <Button className="p-2 rounded-full bg-blue-600 text-white">
                        <Facebook className="h-5 w-5" />
                      </Button>
                      <Button className="p-2 rounded-full bg-sky-500 text-white">
                        <Twitter className="h-5 w-5" />
                      </Button>
                      <Button className="p-2 rounded-full bg-blue-700 text-white">
                        <Linkedin className="h-5 w-5" />
                      </Button>
                      <Button 
                        className="p-2 rounded-full bg-gray-200 text-gray-700"
                        onClick={copyUrlToClipboard}
                      >
                        <Copy className="h-5 w-5" />
                      </Button>
                      {copiedToClipboard && (
                        <div className="absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs px-2 py-1 rounded">
                          Copied!
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>
              
              <div className="text-center mb-4">
                <p className="text-lg font-medium mb-2">Want to make an even bigger impact in 2024?</p>
                <Button 
                  className="inline-flex items-center px-6 py-3 rounded-lg shadow-md text-white"
                  style={{ backgroundColor: FOOD_BANK_INFO.secondaryColor }}
                  onClick={() => window.open('https://example.com/donate', '_blank')}
                >
                  <Heart className="mr-2 h-5 w-5" /> Donate Again
                </Button>
              </div>
              
              <div className="mt-6 text-center text-gray-500 text-sm">
                <p>
                  Powered by Impact Wrapped for Food Banks
                </p>
              </div>
            </div>
            
            <div className="px-6 pb-6">
              <Button 
                className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-lg shadow-sm text-gray-700 bg-white"
                onClick={goToPreviousSlide}
              >
                <ChevronLeft className="mr-2 h-5 w-5" /> Back
              </Button>
            </div>
          </div>
        )}
      </Card>
      
      <style jsx global>{`
        @keyframes countUp {
          from { transform: translateY(20px); opacity: 0; }
          to { transform: translateY(0); opacity: 1; }
        }
        .animate-count {
          animation: countUp 1s ease-out forwards;
        }
      `}</style>
    </div>
  );
};

export default DonorImpactExperience;